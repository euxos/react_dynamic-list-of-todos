{"version":3,"sources":["helpers/api.ts","components/TodoCard/TodoCard.tsx","components/TodoList/TodoList.tsx","components/TodoButton/TodoButton.tsx","App.tsx","helpers/helpers.ts","index.tsx"],"names":["getAll","url","fetch","then","response","json","TodoCard","todo","className","title","user","name","completed","TodoList","todoList","map","key","id","TodoButton","handleClick","status","type","onClick","disabled","App","useState","sortType","setSortType","todos","setTodos","isLoading","setIsLoading","isLoaded","setIsLoaded","errorMessage","setErrorMessage","handleLoadClick","a","todosFromServer","usersFromServer","todosWithUsers","find","userId","length","sortedTodos","useMemo","sort","currTodo","nextTodo","localeCompare","getSortedTodos","ReactDOM","render","document","getElementById"],"mappings":"sVAeMA,G,MAAS,SAAIC,GACjB,OAAOC,MAhBO,iEAgBSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCTlBC,G,MAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,wBAAIC,UAAU,cACZ,wBAAIA,UAAU,mBAAmBD,EAAKE,OACtC,uBAAGD,UAAU,cAAcD,EAAKG,KAAMH,EAAKG,KAAKC,KAAO,WACtDJ,EAAKK,UACF,yBAAKJ,UAAU,8BAAf,aACA,yBAAKA,UAAU,+BAAf,oBCLKK,G,MAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACvC,wBAAIN,UAAU,cACXM,EAASC,KAAI,SAACR,GAAD,OACZ,kBAAC,EAAD,CAAUA,KAAMA,EAAMS,IAAKT,EAAKU,WCHzBC,G,MAA8B,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOU,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,OAAvB,OACzC,4BACEC,KAAK,SACLb,UAAU,eACVc,QAASH,EACTI,SAAUH,GAETA,EAAS,aAAeX,K,OCuGde,EA/GH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAEUF,mBAAiB,IAF3B,mBAETG,EAFS,KAEFC,EAFE,OAGkBJ,oBAAS,GAH3B,mBAGTK,EAHS,KAGEC,EAHF,OAIgBN,oBAAS,GAJzB,mBAITO,EAJS,KAICC,EAJD,OAKwBR,mBAAS,IALjC,mBAKTS,EALS,KAKKC,EALL,KAOVC,EAAe,uCAAG,gCAAAC,EAAA,6DACtBN,GAAa,GADS,kBJKI/B,EAAa,eILjB,cAIdsC,EAJc,gBJMItC,EAAa,eINjB,OAKduC,EALc,OAOdC,EAAiBF,EAAgBvB,KAAI,SAAAR,GAAI,kCAC1CA,GAD0C,IAE7CG,KAAM6B,EAAgBE,MAAK,SAAA/B,GAAI,OAAIA,EAAKO,KAAOV,EAAKmC,eAGtDb,EAASW,GACTP,GAAY,GAEkB,IAA1BO,EAAeG,OACjBR,EAAgB,8BAEhBA,EAAgB,IAlBE,kDAqBpBA,EAAgB,6BArBI,QAwBtBJ,GAAa,GAxBS,0DAAH,qDA2Cfa,EAAcC,mBAAQ,WAC1B,OCzD0B,SAACjB,EAAeF,GAC5C,OAAQA,GACN,IAAK,QACH,OAAO,YAAIE,GAAOkB,MAAK,SAACC,EAAUC,GAAX,OACrBD,EAAStC,MAAMwC,cAAcD,EAASvC,UAE1C,IAAK,SACH,OAAO,YAAImB,GAAOkB,MAAK,SAACC,EAAUC,GAChC,OAAQD,EAASrC,MAAQsC,EAAStC,KAC9BqC,EAASrC,KAAKC,KAAKsC,cAAcD,EAAStC,KAAKC,MAC/C,KAGR,IAAK,SACH,OAAO,YAAIiB,GAAOkB,MAAK,SAACC,EAAUC,GAChC,OAAQD,EAASnC,YAAcoC,EAASpC,UACpC,EAAImC,EAASnC,WAAa,EAAI,KAGtC,QACE,OAAOgB,GDqCFsB,CAAetB,EAAOF,KAC5B,CAACE,EAAOF,IAEX,OACE,yBAAKlB,UAAU,QACb,wBAAIA,UAAU,eAAd,iBAEEwB,EAWCE,EAAaS,OA2BZ,oCACE,0BAAMnC,UAAU,eAAe0B,GAE/B,kBAAC,EAAD,CACEzB,MAAM,SACNU,YAAaiB,EACbhB,OAAQU,KAhCZ,oCACE,yBAAKtB,UAAU,sBACb,kBAAC,EAAD,CACEC,MAAM,gBACNU,YApCU,WACtBQ,EAAY,UAoCAP,OAAQU,IAEV,kBAAC,EAAD,CACErB,MAAM,kBACNU,YArCS,WACrBQ,EAAY,WAqCAP,OAAQU,IAEV,kBAAC,EAAD,CACErB,MAAM,iBACNU,YAtCW,WACvBQ,EAAY,WAsCAP,OAAQU,IAEV,kBAAC,EAAD,CACErB,MAAM,QACNU,YAvDA,WACZQ,EAAY,KAuDAP,OAAQU,KAGZ,kBAAC,EAAD,CAAUhB,SAAU8B,KAlCxB,oCACGV,GAAgB,0BAAM1B,UAAU,eAAe0B,GAEhD,kBAAC,EAAD,CACEzB,MAAM,OACNU,YAAaiB,EACbhB,OAAQU,OErEpBqB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.fad019c3.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user?: User;\n}\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n}\n\nexport const getTodos = () => getAll<Todo>('/todos.json');\nexport const getUsers = () => getAll<User>('/users.json');\n","import React from 'react';\nimport { Todo } from '../../helpers/api';\nimport './TodoCard.css';\n\ntype Props = {\n  todo: Todo;\n}\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => (\n  <li className=\"todo__item\">\n    <h2 className=\"todo_item-title\">{todo.title}</h2>\n    <p className=\"todo__user\">{todo.user? todo.user.name : 'Unknown'}</p>\n    {todo.completed\n      ? <div className=\"todo__item-completed--true\">Completed</div>\n      : <div className=\"todo__item-completed--false\">Not completed</div>\n    }\n  </li>\n)\n","import React from 'react';\nimport { Todo } from '../../helpers/api';\nimport { TodoCard } from '../TodoCard/TodoCard';\nimport './TodoList.css';\n\ntype Props = {\n  todoList: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todoList }) => (\n  <ul className=\"todo__list\">\n    {todoList.map((todo: Todo) => (\n      <TodoCard todo={todo} key={todo.id} />\n    ))}\n  </ul>\n);\n\n","import React from 'react';\nimport './TodoButton.css';\n\ntype Props = {\n  handleClick: () => void;\n  title: string;\n  status: boolean;\n}\n\nexport const TodoButton: React.FC<Props> = ({ title, handleClick, status }) => (\n  <button\n    type=\"button\"\n    className=\"todo__button\"\n    onClick={handleClick}\n    disabled={status}\n  >\n    {status ? 'Loading...' : title}\n  </button>\n);\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\n\nimport { getUsers, getTodos, Todo } from './helpers/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoButton } from './components/TodoButton/TodoButton';\nimport { getSortedTodos } from './helpers/helpers';\n\nconst App = () => {\n  const [sortType, setSortType] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    try {\n      const todosFromServer = await getTodos();\n      const usersFromServer = await getUsers();\n\n      const todosWithUsers = todosFromServer.map(todo => ({\n        ...todo,\n        user: usersFromServer.find(user => user.id === todo.userId),\n      }));\n\n      setTodos(todosWithUsers);\n      setIsLoaded(true);\n\n      if (todosWithUsers.length === 0) {\n        setErrorMessage('No Todos, try again later.');\n      } else {\n        setErrorMessage('');\n      }\n    } catch (exeption) {\n      setErrorMessage('Network error, try again.');\n    }\n\n    setIsLoading(false);\n  }\n\n  const reset = () => {\n    setSortType('');\n  }\n\n  const sortListByTitle = () => {\n    setSortType('title');\n  }\n\n  const sortListByUser = () => {\n    setSortType('author');\n  }\n\n  const sortListByStatus = () => {\n    setSortType('status');\n  }\n\n  const sortedTodos = useMemo(() => {\n    return getSortedTodos(todos, sortType);\n  }, [todos, sortType]);\n\n  return (\n    <div className=\"todo\">\n      <h1 className=\"todo__title\">List of Todos</h1>\n\n      {!isLoaded ? (\n        <>\n          {errorMessage && <span className=\"todo__error\">{errorMessage}</span>}\n\n          <TodoButton\n            title=\"Load\"\n            handleClick={handleLoadClick}\n            status={isLoading}\n          />\n        </>\n      ) : (\n        !errorMessage.length ? (\n          <>\n            <div className=\"todo__sort-buttons\">\n              <TodoButton\n                title=\"Sort by title\"\n                handleClick={sortListByTitle}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Sort by authors\"\n                handleClick={sortListByUser}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Sort by status\"\n                handleClick={sortListByStatus}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Reset\"\n                handleClick={reset}\n                status={isLoading}\n              />\n            </div>\n            <TodoList todoList={sortedTodos} />\n          </>\n        ) : (\n          <>\n            <span className=\"todo__error\">{errorMessage}</span>\n\n            <TodoButton\n              title=\"Reload\"\n              handleClick={handleLoadClick}\n              status={isLoading}\n            />\n          </>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { Todo } from './api';\n\nexport const getSortedTodos = (todos: Todo[], sortType: string) => {\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((currTodo, nextTodo) => (\n        currTodo.title.localeCompare(nextTodo.title)));\n\n    case 'author':\n      return [...todos].sort((currTodo, nextTodo) => {\n        return (currTodo.user && nextTodo.user)\n          ? currTodo.user.name.localeCompare(nextTodo.user.name)\n          : 0;\n      });\n\n    case 'status':\n      return [...todos].sort((currTodo, nextTodo) => {\n        return (currTodo.completed === nextTodo.completed)\n          ? 0 : currTodo.completed ? -1 : 1;\n      });\n\n    default:\n      return todos;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}